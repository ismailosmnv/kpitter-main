{"ast":null,"code":"import _objectSpread from\"/Users/ismailosmanov/Downloads/kpitter-main/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Змініть, якщо бекенд працює не на 8000 порту або іншим URL\nconst BASE_URL='http://localhost:8000';function getAuthHeader(){const username=localStorage.getItem('kpitter_username');const password=localStorage.getItem('kpitter_password');if(!username||!password)return{};const token=btoa(\"\".concat(username,\":\").concat(password));return{'Authorization':'Basic '+token};}export async function registerUser(username,password){const body={username,password};const resp=await fetch(\"\".concat(BASE_URL,\"/users\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)});if(!resp.ok){throw new Error('Register failed: '+resp.status);}return resp.json();}// GET /posts\nexport async function getPosts(){const resp=await fetch(\"\".concat(BASE_URL,\"/posts\"),{headers:_objectSpread({},getAuthHeader())});if(!resp.ok){throw new Error('Cannot fetch posts: '+resp.status);}return resp.json();}// POST /posts\nexport async function createPost(text){const body={text};const resp=await fetch(\"\".concat(BASE_URL,\"/posts\"),{method:'POST',headers:_objectSpread({'Content-Type':'application/json'},getAuthHeader()),body:JSON.stringify(body)});if(!resp.ok){throw new Error('Cannot create post: '+resp.status);}return resp.json();}// POST /posts/{postId}/like\nexport async function likePost(postId){const resp=await fetch(\"\".concat(BASE_URL,\"/posts/\").concat(postId,\"/like\"),{method:'POST',headers:_objectSpread({},getAuthHeader())});if(!resp.ok){throw new Error('Cannot like post: '+resp.status);}return resp.json();}// GET /posts/{postId}\nexport async function getPostDetail(postId){const resp=await fetch(\"\".concat(BASE_URL,\"/posts/\").concat(postId),{headers:_objectSpread({},getAuthHeader())});if(!resp.ok){throw new Error('Cannot get post detail: '+resp.status);}return resp.json();}// GET /users/{username}/posts\nexport async function getUserPosts(username){const resp=await fetch(\"\".concat(BASE_URL,\"/users/\").concat(username,\"/posts\"),{headers:_objectSpread({},getAuthHeader())});if(!resp.ok){throw new Error('Cannot get user posts: '+resp.status);}return resp.json();}","map":{"version":3,"names":["BASE_URL","getAuthHeader","username","localStorage","getItem","password","token","btoa","concat","registerUser","body","resp","fetch","method","headers","JSON","stringify","ok","Error","status","json","getPosts","_objectSpread","createPost","text","likePost","postId","getPostDetail","getUserPosts"],"sources":["/Users/ismailosmanov/Downloads/kpitter-main/frontend/src/api.js"],"sourcesContent":["// Змініть, якщо бекенд працює не на 8000 порту або іншим URL\nconst BASE_URL = 'http://localhost:8000';\n\nfunction getAuthHeader() {\n  const username = localStorage.getItem('kpitter_username');\n  const password = localStorage.getItem('kpitter_password');\n  if (!username || !password) return {};\n  const token = btoa(`${username}:${password}`);\n  return { 'Authorization': 'Basic ' + token };\n}\n\nexport async function registerUser(username, password) {\n  const body = { username, password };\n  const resp = await fetch(`${BASE_URL}/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n  if (!resp.ok) {\n    throw new Error('Register failed: ' + resp.status);\n  }\n  return resp.json();\n}\n\n// GET /posts\nexport async function getPosts() {\n  const resp = await fetch(`${BASE_URL}/posts`, {\n    headers: { ...getAuthHeader() }\n  });\n  if (!resp.ok) {\n    throw new Error('Cannot fetch posts: ' + resp.status);\n  }\n  return resp.json();\n}\n\n// POST /posts\nexport async function createPost(text) {\n  const body = { text };\n  const resp = await fetch(`${BASE_URL}/posts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      ...getAuthHeader()\n    },\n    body: JSON.stringify(body)\n  });\n  if (!resp.ok) {\n    throw new Error('Cannot create post: ' + resp.status);\n  }\n  return resp.json();\n}\n\n// POST /posts/{postId}/like\nexport async function likePost(postId) {\n  const resp = await fetch(`${BASE_URL}/posts/${postId}/like`, {\n    method: 'POST',\n    headers: { ...getAuthHeader() }\n  });\n  if (!resp.ok) {\n    throw new Error('Cannot like post: ' + resp.status);\n  }\n  return resp.json();\n}\n\n// GET /posts/{postId}\nexport async function getPostDetail(postId) {\n  const resp = await fetch(`${BASE_URL}/posts/${postId}`, {\n    headers: { ...getAuthHeader() }\n  });\n  if (!resp.ok) {\n    throw new Error('Cannot get post detail: ' + resp.status);\n  }\n  return resp.json();\n}\n\n// GET /users/{username}/posts\nexport async function getUserPosts(username) {\n  const resp = await fetch(`${BASE_URL}/users/${username}/posts`, {\n    headers: { ...getAuthHeader() }\n  });\n  if (!resp.ok) {\n    throw new Error('Cannot get user posts: ' + resp.status);\n  }\n  return resp.json();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}